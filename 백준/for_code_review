1520번 내리막 길
```
import java.io.*;
import java.util.*;

public class Main {

    static int endX, endY;
    static int[][] map;
    static int[][] dp;

    static int[] dx = {-1, 0, 1, 0};
    static int[] dy = {0, -1, 0, 1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        endX = N - 1;
        endY = M - 1;

        map = new int[N][M];
        dp = new int[N][M];

        for (int i=0; i<N; i++) {
            st = new StringTokenizer(br.readLine());

            for (int j=0; j<M; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
                dp[i][j] = -1; // dp 값 초기화
            }
        }

        bw.write(String.valueOf(dfs(0,0)));
        bw.flush();
        bw.close();
    }

    public static int dfs(int x, int y){
        if(x == endX && y == endY) return 1;

        if(dp[x][y] == -1) {
            dp[x][y] = 0;
            for(int i = 0; i < 4; i++){
                int nx = x + dx[i];
                int ny = y + dy[i];

                if(nx < 0 || nx > endX || ny < 0 || ny > endY) continue;

                if(map[x][y] > map[nx][ny]){
                    dp[x][y] += dfs(nx, ny);
                }
            }
        }
        return dp[x][y];
    }
}
```

1931번 회의실 배정
```
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int[][] time = new int[N][2]; // time[][0]은 시작 시점, time[][1]은 종료 시점을 의미

        for(int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine(), " ");
            time[i][0] = Integer.parseInt(st.nextToken());
            time[i][1] = Integer.parseInt(st.nextToken());
        }

        // 정렬 : 끝나는 시간을 기준
        // (보통 Arrays.sort 함수의 compare를 재정의(오버라이드)
        Arrays.sort(time, (A, B) -> A[1] == B[1] ? A[0] - B[0] : A[1] - B[1]);

        int end = -1;

        // 그리디
        int count = 0;
        for(int i = 0; i < N; i++) {
            if(time[i][0] >= end) { // 직전 종료시간이 다음 회의 시작 시간보다 작거나 같다면 갱신
                end = time[i][1];
                count++;
            }
        }

        bw.write(String.valueOf(count));
        bw.flush();
        bw.close();
    }
}
```


1018번 체스판 다시 칠하기 (실패ㅜ 미완성 코드)
```
import java.io.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;

public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        char[][] map = new char[N][M];

        char[] startColor = new char[N];
        int[] count = new int[N];


        for (int i = 0; i < N; i++) {
            map[i] = br.readLine().toCharArray();
        }

        int n = 0;
        for (int i = 0; i < N; i++){
            for(int j = 0; j < M - 2; j++){
                if(j == 0){
                    startColor[i] = map[i][0];
                } else {
                    if(map[i][j] == map[i][j-1]) n++;
                }
            }

            if(i/2 != 0){
                if(startColor[0] == startColor[i]){

                }
            }
            if(startColor[0] == startColor[i]) count[i] = n/2 + n%2;
            else count[i] = (n/2 + n%2) +1;

            n = 0;
        }

        int min = 10000000;
        int sum = 0;
        int idx = 0;

        do{
            for(int j = 0; j < 8; j++){
                sum += count[idx+j];
            }

            min = Math.min(min, sum);
            sum = 0;
            idx++;
        } while(idx < N-8);

//        for (int i = 0; i < N-8; i++) {
//            for(int j = 0; j < 8; j++){
//                sum += count[i+j];
//            }
//
//            min = Math.min(min, sum);
//            sum = 0;
//        }

        bw.write(String.valueOf(min));
        bw.flush();
        bw.close();
    }
}
```


2252번 줄 세우기
```
import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken()); // 학생 수
        int M = Integer.parseInt(st.nextToken()); // 입력 줄 개수

        // 위상정렬을 위한 진입차수 저장 배열
        int[] indegree = new int[N+1]; // (노드 번호가 1번부터 시작하기 때문에 +1)

        // 위상정렬에 사용할 그래프 2차원 리스트 구현
        ArrayList<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();
        for(int i = 0; i < N+1; i++){
            graph.add(new ArrayList<Integer>());
        }

        // 리스트 초기화
        // 진입차수배열 값 초기화
        for(int i = 0; i < M; i++){
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());

            graph.get(a).add(b);
            indegree[b]++;
        }

        // 위상정렬에 사용할 큐
        Queue<Integer> q = new LinkedList<>();

        // 진입차수가 0인 값을 큐에 삽입
        for(int i = 1; i < indegree.length; i++){
            if(indegree[i] == 0){
                q.offer(i);
            }
        }

        while (!q.isEmpty()){
            int studentNo = q.poll();

            bw.write(String.valueOf(studentNo) + " ");

            List<Integer> list = graph.get(studentNo);

            for(int i = 0; i < list.size(); i++){
                int temp = list.get(i);
                indegree[temp]--;

                if(indegree[temp] == 0){
                    q.offer(temp);
                }
            }
        }

        bw.flush();
        bw.close();
    }
}
```


26069번 붙임성 좋은 총총이
```
import java.io.*;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;

public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int N = Integer.parseInt(br.readLine());

        // 감염된 친구들 Set
        Set<String> friends = new HashSet<>();
        friends.add("ChongChong");

        for(int i = 0; i < N; i++){
            StringTokenizer st = new StringTokenizer(br.readLine());
            String A = st.nextToken();
            String B = st.nextToken();

            // A와 B 둘 중 한 명이라도 감염됐다면 Set에 추가
            // Set의 특성상 중복은 거름
            if(friends.contains(A)) friends.add(B);
            if(friends.contains(B)) friends.add(A);
        }
        bw.write(String.valueOf(friends.size()));

        bw.flush();
        bw.close();
    }
}
```
